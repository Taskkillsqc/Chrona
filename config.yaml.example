# Chrona 完整配置示例
# 复制此文件为 config.yaml 并填入您的真实配置信息

# ============================================
# 基础配置
# ============================================

# ============================================
# 基础配置
# ============================================

# LLM 配置 - V3 增强版
llm:
  # 预设模型配置（推荐）
  provider: "gemini"  # 支持: gemini, deepseek, openai, custom, local
  api_key: "your-api-key-here"
  
  # 本地模型配置（离线使用）
  local:
    enabled: false  # 是否启用本地模型
    model_path: "./models/qwen2.5-1.5b-instruct-q4_k_m.gguf"  # 模型文件路径
    context_length: 2048  # 上下文长度
    gpu_layers: 0  # 使用 GPU 的层数，0 表示仅使用 CPU
    n_threads: null  # CPU 线程数，null 表示自动检测
    verbose: false  # 是否显示详细日志
    temperature: 0.7  # 创造性参数
    max_tokens: 1000  # 最大生成令牌数
    top_p: 0.9  # 核采样参数
    top_k: 40  # top-k 采样
    repeat_penalty: 1.1  # 重复惩罚
  
  # 自定义配置（高级用户）
  custom:
    enabled: false  # 是否启用自定义配置
    url: "https://your-custom-llm-api.com/v1/chat/completions"  # 自定义API端点
    model: "your-model-name"  # 自定义模型名称
    headers:  # 自定义请求头
      Authorization: "Bearer your-api-key"
      # Content-Type: "application/json"  # 默认已包含
    payload_format: "openai"  # 请求格式: openai, custom
    response_format: "openai"  # 响应格式: openai, custom
    timeout: 30  # 请求超时时间（秒）
  
  # 高级参数（仅用于在线模型）
  parameters:
    temperature: 0.7  # 创造性参数 (0.0-2.0)
    max_tokens: 1000  # 最大令牌数
    top_p: 0.9  # 核采样参数
    
# 向后兼容的旧配置（仍然支持）
model: gemini     # 如果没有llm配置，会使用这个
api_key: "your-api-key-here"  # 如果没有llm配置，会使用这个

# CalDAV 服务配置
# 支持单个提供商（向后兼容）或多个提供商配置

# 方式一：传统单个提供商配置（向后兼容）
caldav:
  url: "https://caldav.icloud.com"  # CalDAV 服务器地址
  username: "your-email@example.com"  # 您的邮箱地址
  password: "your-app-specific-password"  # 应用专用密码（推荐）

# 方式二：多提供商配置（推荐，如果您有多个日历服务）
# 注释掉上面的单个配置，使用下面的多提供商配置
# caldav:
#   providers:
#     icloud:  # iCloud 日历
#       url: "https://caldav.icloud.com/"
#       username: "your-icloud@icloud.com"
#       password: "your-icloud-app-password"
#     
#     google:  # Google Calendar
#       url: "https://apidata.googleusercontent.com/caldav/v2/your-email@gmail.com/events/"
#       username: "your-email@gmail.com"
#       password: "your-google-app-password"
#     
#     outlook:  # Outlook/Exchange
#       url: "https://outlook.live.com/owa/"
#       username: "your-email@outlook.com"  
#       password: "your-outlook-password"
#     
#     custom:  # 自定义 CalDAV 服务
#       url: "https://your-caldav-server.com/"
#       username: "your-username"
#       password: "your-password"

# 方式三：简化的列表配置格式
# caldav:
#   - name: "iCloud"
#     url: "https://caldav.icloud.com/"
#     username: "your-icloud@icloud.com"
#     password: "your-icloud-app-password"
#   
#   - name: "Google Calendar"
#     url: "https://apidata.googleusercontent.com/caldav/v2/your-email@gmail.com/events/"
#     username: "your-email@gmail.com"
#     password: "your-google-app-password"
#
#   - name: "Wecom Calendar"
#     url: "https://caldav.wecom.work/calendar/"
#     username: "your-email@gmail.com"
#     password: "your-google-app-password"

# 数据存储配置
database: "./data/agent.db"  # SQLite 数据库文件路径

# Webhook 通知配置
webhook_url: "https://your-notification-service.com/webhook"  # 通知服务 URL
webhook_type: "gotify"  # 通知类型: gotify, slack, generic, custom

# 自定义 Webhook 配置（当 webhook_type 为 custom 时启用）
webhook_custom:
  enabled: false  # 是否启用自定义 webhook
  url: "https://your-custom-webhook.com/api/notify"  # 自定义 webhook URL
  method: "POST"  # HTTP 方法: GET, POST, PUT
  timeout: 30  # 请求超时时间（秒）
  headers:  # 自定义请求头
    Authorization: "Bearer your-api-token"
    Content-Type: "application/json"
    X-Custom-Header: "custom-value"
  # JSON 模板，支持变量替换
  payload_template: |
    {
      "notification": {
        "title": {{title}},
        "message": {{body}},
        "timestamp": {{timestamp}},
        "priority": {{priority}},
        "event": {
          "summary": {{event.summary}},
          "description": {{event.description}},
          "start_time": {{event.start_time}},
          "calendar": {{event.calendar_name}},
          "duration": {{event.duration_minutes}}
        },
        "analysis": {
          "important": {{analysis.important}},
          "need_remind": {{analysis.need_remind}},
          "reason": {{analysis.reason}},
          "task": {{analysis.task}}
        }
      }
    }

# ============================================
# 高级配置
# ============================================

# 运行时设置
settings:
  fetch_interval: 600  # 获取日程间隔（秒，默认10分钟）
  remind_check_interval: 60  # 检查提醒间隔（秒，默认1分钟）
  cleanup_days: 7  # 清理多少天前的旧记录
  timezone: "Asia/Shanghai"  # 时区设置

# 心跳包监控配置（用于 Uptime Kuma 等监控服务）
heartbeat:
  enabled: true  # 是否启用心跳包功能
  url: "https://your-uptime-kuma.com/api/push/your-push-token"  # 心跳包推送URL
  interval: 60  # 心跳包发送间隔（秒，推荐60-300秒）
  timeout: 10  # 请求超时时间（秒）
  # 可选参数（根据监控服务要求调整）
  params:
    status: "up"  # 状态参数: up, down, ping
    msg: "Schedule Manager is running"  # 自定义消息
    ping: ""  # ping值（可选，单位毫秒）

# REST API 服务配置
api:
  enabled: true  # 是否启用API服务
  host: "0.0.0.0"  # 监听地址（0.0.0.0=所有接口，127.0.0.1=仅本地）
  port: 8000  # 监听端口

# ============================================
# 配置说明和示例
# ============================================

# CalDAV 服务器配置示例：
# - iCloud: https://caldav.icloud.com
# - Google Calendar: https://apidata.googleusercontent.com/caldav/v2/
# - Outlook: https://outlook.live.com/owa/
# - Yahoo: https://caldav.calendar.yahoo.com

# Webhook 通知服务配置示例：
# Gotify: https://your-gotify.com/message?token=your-app-token
# Slack: https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
# 通用: https://your-custom-webhook.com/notify

# ============================================
# 心跳包监控服务配置示例
# ============================================
# 
# Uptime Kuma Push 监控：
# 1. 在 Uptime Kuma 中创建新的 Push 监控
# 2. 复制推送URL: https://your-uptime-kuma.com/api/push/AbCdEf123
# 3. 可选参数: ?status=up&msg=OK&ping=10
#
# 其他监控服务：
# - Healthchecks.io: https://hc-ping.com/your-uuid-here
# - StatusCake: https://push.statuscake.com/?PK=your-key&TestID=your-test-id
# - 自定义HTTP端点: https://your-monitor.com/webhook
#
# ============================================
# API接口说明
# ============================================
#
# 启用API服务后，可通过以下接口进行操作：
#
# 基础接口：
# - GET /                     # 根路径，返回基本信息
# - GET /health              # 健康检查
# - GET /config              # 获取配置信息（隐藏敏感信息）
#
# 统计接口：
# - GET /stats               # 获取统计信息和心跳包状态
#
# 事件接口：
# - GET /events/upcoming     # 获取即将到来的事件
# - GET /events/recent       # 获取最近的事件记录
# - GET /events/reminders    # 获取需要提醒的事件
#
# 心跳包接口：
# - GET /heartbeat/status    # 获取心跳包发送状态
# - POST /heartbeat/send     # 手动发送心跳包
#
# 代理操作接口：
# - POST /agent/fetch        # 手动触发事件获取和分析
# - POST /agent/check-reminders  # 手动触发提醒检查
#
# API文档：
# - http://localhost:8000/docs    # Swagger UI 文档
# - http://localhost:8000/redoc   # ReDoc 文档
#
